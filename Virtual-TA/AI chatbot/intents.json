{
    "intents": [
      {
        "tag": "thanks",
        "patterns": [ "thanks", "thank you", "that's helpful" ],
        "responses": [ "Happy to help!", "Any Time!", "My pleasure" ]
      },
      {
        "tag": "greeting",
        "patterns": [ "hi", "hello", "how are you", "good day" ],
        "responses": [ "Hello, thanks for visiting", "Good to see you again", "Hi there, how can I help?" ],
        "context_set": []
      },
      {
        "tag": "goodbye",
        "patterns": [ "bye", "see you later", "goodbye" ],
        "responses": [ "See you later, thanks for visiting", "Have a nice day", "Bye! Come back again soon" ]
      },
      {
        "tag": "test",
        "patterns": ["when is the next test?","when is the next exam?", "what is the date of the next test","When will the next midterm be?"],
        "responses": ["The Mid-term date is September 8th and the Final is December 10th."]
      },
      {
        "tag": "contact",
        "patterns": ["what is the professor's email?", "who is the professor", "who is the TA", "TA email", "email"],
        "responses": [ "The professor is Anjum Chida. Her email is Anjum.Chida@utdallas.edu" ]
      },
      {
        "tag": "resources",
        "patterns": ["What is the textbook for this course", "I need more help", "How do I study", "How do I learn more about data structures and algorithms"  ],
        "responses": [ "The textbook for this course is . It is a great resource if you are looking to learn more or need extra help!" ]
      },
      {
        "tag": "grading",
        "patterns": ["how much are assignments worth?", "how much are exams worth", "what percent of my grade is assignments", "is attendance required"],
        "responses": ["Assignments are worth 15%, projects 20%, class participation 5%, and each exam is worth 20%."]
      },
      {
        "tag": "hash table",
        "patterns": ["What is a hash table", "what is a hash map", "hashing", "hash"],
        "responses": [ "Hashing lets you organize data so you can quickly find values for a given key. Worst lookup: O(n). Average: O(1)." ]
      },
      {
        "tag": "queue",
        "patterns": ["What is a queue", "queue", "benefits of a queue", "What is FIFO", "first in first out"],
        "responses": ["A first in first out data structure that is open at both ends. Think of it like waiting in line for a ticket. First come, first served."]
      },
      {
        "tag": "linked list",
        "patterns": ["What is a linked list", "linked", "list", "how do I follow a linked list", "linked list"],
        "responses": [ "A linked list contains nodes where each node has a dataset and a pointer to the next item in the list." ]
      },
      {
        "tag": "stack",
        "patterns": ["What is a stack", "How do I pop items off the stack", "stack", "push", "last in first out", "first in last out", "FILO","LIFO" ],
        "responses": [ "A stack is a data structure that follows last in first out. Meaning an item is pushed to the top of the stack. When you access an item it can only be done by viewing the top item at a time." ]
      },
      {
        "tag": "sorting",
        "patterns": ["shellsort worst case is", "the best case of mergesort","the average runtime of quicksort","heapsort","radix sort","binsort","bucket sort","counting sort","cubesort"],
        "responses": [ "The speed of Quicksort is dependent on how you select a pivot.", "Shellsort performs best when the data is mostly sorted, but generally within O(n^2).", "Remember that Radixsort is a non-comparison sort that processes individual digits.", "Heapsort achieves efficiency by, as the name suggests, utilizing the 'heap' data structure. This guarantees that the root node of the heap is the largest (or smallest) element." ]
      },
      {
        "tag": "Big-O",
        "patterns": [ "which expression is slower O(n) or O(n^2)", "which expression is faster O(2n) or O(nlog(n))", "which is faster O(n^2) or O(3n)","which is faster O(n^2) or O(n)", "which is slower O(nlog(n)) or O(2^n)" ],
        "responses": [ "Consider that big-O notation describes the growth of a function.", "To compare big-O's, think of of the speeds in which your functions grow as their inputs tend to infinity.", "Remember that big-O representations of functions can be simplified.", "Big-O comparisons only care about the simplest representation of the function since that determines the speed of their growth." ]
      },
      {
        "tag": "Tree",
        "patterns": [ "show the binary trie for the following collection of values: 3 2 10 28 4", "show the result of inserting the value 39 into the AVL tree on the left", "show the splay tree that results from searching for value 75 in the splay tree", "show the binary tree for the following collection of values: 30 2 81 100 58", "show the result of inserting the value 39 into the AVL tree on the left", "show the splay tree that results from searching for value 75 in the splay tree",  "show the binary tree for the following collection of values: 30 28 19 3 8", "show the result of inserting the value 39 into the AVL tree on the left", "show the splay tree that results from searching for value 75 in the splay tree" ],
        "responses": [ "Remember that a binary tree has, as the name suggests, up to 2 branches per node.", "Consider how a tree must change its structure when its contents are modified: Will the root change? Will certain nodes stay on the same side of the root? etc.", "An AVL tree will retain a balanced, binary-tree structure. How will the tree rotate in response to the insertion/deletion?" ]
      }
    ]
  }